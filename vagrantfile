# -*- mode: ruby -*-

VAGRANTFILE_API_VERSION = "2"

$run_test_scenario_script = <<SCRIPT
  write-output "##teamcity[blockOpened name='Testing Scenario {scenario_name}']"
  $env:TEAMCITY_PROJECT_NAME="#{ENV['TEAMCITY_PROJECT_NAME']}"
  set-location c:/temp/tests
  write-host executing bundle exec rspec Spec/{scenario_name}_spec.rb
  C:/tools/ruby23/bin/bundle.bat exec rspec Spec/{scenario_name}_spec.rb
  write-output "##teamcity[blockClosed name='Testing Scenario {scenario_name}']"
  exit $LASTEXITCODE
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  hostname = "vagrantdsc.local"
  config.vm.guest = :windows
  config.vm.communicator = "winrm"

  config.vm.synced_folder ".", "/vagrant", disabled: true

  if Vagrant.has_plugin?("vagrant-multi-hostsupdater")
    config.multihostsupdater.aliases = {ip_address => [hostname]}
  end

  config.vm.provider "virtualbox" do |v, override|
    v.gui = true
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    v.customize ["modifyvm", :id, "--audio", "none"]
    v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    v.customize ["modifyvm", :id, "--usb", "off"]
    override.vm.box = "octopusdeploy/dsc-test-server"
    override.vm.box_version = "0.1.0"
    override.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
    override.vm.network :forwarded_port, guest: 80,   host: 8000, id: "web"
    override.vm.network :forwarded_port, guest: 443, host: 8443,  id: "ssl"
    override.vm.network :forwarded_port, guest: 22, host: 9222,  id: "ssh"
  end

  # this relies on the vagrant-aws & vagrant-winrm-syncedfolders plugins
  config.vm.provider :aws do |aws, override|
    aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
    aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
    aws.region = "ap-southeast-2"
    aws.ami = "ami-d96265ba" # dsc-test-server-windows-2012-r2--v0.0.31
    aws.instance_type = "c4.xlarge"
    aws.keypair_name = "#{ENV['KEY_NAME']}"
    aws.tags = {
      'Name' => 'Vagrant DSC testing'
    }
    aws.security_groups = [ ENV['AWS_SECURITY_GROUP_ID'] ]
    aws.subnet_id = ENV['AWS_SUBNET_ID']
    aws.associate_public_ip = true
    aws.user_data = File.read("Tests/aws_user_data.ps1")
    override.vm.box = "dummy"
    override.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"
    override.ssh.private_key_path = "./#{ENV['KEY_NAME']}.pem"
    override.winrm.username = "Administrator"
    override.winrm.password = :aws # this uses the vagrant-aws-winrm plugin to get the password from aws
    override.winrm.transport = :ssl
    override.winrm.port = 5986
    override.winrm.ssl_peer_verification = false
  end

  # delete existing tests if they exist (for dev)
  config.vm.provision "shell", inline: "if (Test-Path 'c:\\temp\\tests') {remove-item -force -recurse 'c:\\temp\\tests' }"
  # upload tests
  config.vm.provision "file", source: "Tests", destination: "c:\\temp\\tests"
  config.vm.provision "shell", path: "Tests/install-test-dependencies.ps1"
  # in theory, we shouldn't have to do this - the vagrant-dsc should upload it automatically, but cant get it to work
  config.vm.provision "file", source: "OctopusDSC", destination: 'C:\Windows\System32\WindowsPowerShell\v1.0\modules\OctopusDSC'

  # Run DSC to install server
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_01_Install.ps1"
    dsc.configuration_data_file  = "Tests/Configuration.psd1"
    dsc.manifests_path = "Tests"
    dsc.abort_on_dsc_failure = true
  end

  #run tests for server scenario 1 (initial install)
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_01_install')

  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_02_Remove.ps1"
    dsc.configuration_data_file  = "Tests/Configuration.psd1"
    dsc.manifests_path = "Tests"
    dsc.abort_on_dsc_failure = true
  end

  #run tests for server scenario 2 (remove)
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_02_remove')

  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_03_Reinstall.ps1"
    dsc.configuration_data_file  = "Tests/Configuration.psd1"
    dsc.manifests_path = "Tests"
    dsc.abort_on_dsc_failure = true
  end

  #run tests for server scenario 3 (reinstall old version)
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_03_reinstall')

  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_04_Upgrade.ps1"
    dsc.configuration_data_file  = "Tests/Configuration.psd1"
    dsc.manifests_path = "Tests"
    dsc.abort_on_dsc_failure = true
  end

  #run tests for server scenario 4 (upgrade)
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_04_upgrade')

  config.vm.provision "shell", path: "Tests/configure-octopus-for-tentacle-tests.ps1"

  # Run DSC for scenario 1 (initial install)
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_01_Install.ps1"
    dsc.configuration_data_file  = "Tests/Configuration.psd1"
    dsc.manifests_path = "Tests"
    dsc.abort_on_dsc_failure = true
    dsc.configuration_params = {
      "-OctopusServerUrl" => "$ENV:OctopusServerUrl",
      "-ApiKey" => "$ENV:OctopusApiKey",
      "-Environments" => "The-Env",
      "-Roles" => "Test-Tentacle",
      "-ListenPort" => "10933"
    }
  end

  #run tests for tentacle scenario 1 (initial install)
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\trigger-and-wait-for-healthcheck.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_01_install')

  # Run DSC for tentacle scenario 2 (uninstall)
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_02_Remove.ps1"
    dsc.configuration_data_file  = "Tests/Configuration.psd1"
    dsc.manifests_path = "Tests"
    dsc.abort_on_dsc_failure = true
    dsc.configuration_params = {
      "-OctopusServerUrl" => "$ENV:OctopusServerUrl",
      "-ApiKey" => "$ENV:OctopusApiKey",
      "-Environments" => "The-Env",
      "-Roles" => "Test-Tentacle",
      "-ListenPort" => "10933"
    }
  end

  #run tests for tentacle scenario 2 (initial install)
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\trigger-and-wait-for-healthcheck.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_02_remove')

  # Run DSC for tentacle scenario 3 (subsequent re-install)
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_03_Reinstall.ps1"
    dsc.configuration_data_file  = "Tests/Configuration.psd1"
    dsc.manifests_path = "Tests"
    dsc.abort_on_dsc_failure = true
    dsc.configuration_params = {
      "-OctopusServerUrl" => "$ENV:OctopusServerUrl",
      "-ApiKey" => "$ENV:OctopusApiKey",
      "-Environments" => "The-Env",
      "-Roles" => "Test-Tentacle",
      "-ListenPort" => "10933"
    }
  end

  #run tests for tentacle scenario 3 (subsequent re-install)
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\trigger-and-wait-for-healthcheck.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_03_reinstall')

  # Run DSC for tentacle scenario 4 (upgrade)
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_04_Upgrade.ps1"
    dsc.configuration_data_file  = "Tests/Configuration.psd1"
    dsc.manifests_path = "Tests"
    dsc.abort_on_dsc_failure = true
    dsc.configuration_params = {
      "-OctopusServerUrl" => "$ENV:OctopusServerUrl",
      "-ApiKey" => "$ENV:OctopusApiKey",
      "-Environments" => "The-Env",
      "-Roles" => "Test-Tentacle",
      "-ListenPort" => "10933"
    }
  end

  #run tests for tentacle scenario 4 (upgrade)
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\trigger-and-wait-for-healthcheck.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_04_upgrade')

end
