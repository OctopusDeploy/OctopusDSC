# -*- mode: ruby -*-

VAGRANT_FILE_API_VERSION = "2"

aws_access_key_id = ENV['AWS_ACCESS_KEY_ID'] || 'not-set'
aws_secret_access_key = ENV['AWS_SECRET_ACCESS_KEY'] || 'not-set'
aws_subnet_id = ENV['AWS_SUBNET_ID'] || 'not-set'
aws_security_group_id = ENV['AWS_SECURITY_GROUP_ID'] || 'not-set'
aws_key_name = ENV['KEY_NAME'] || 'not-set'
azure_vm_password = ENV['AZURE_VM_PASSWORD'] || 'not-set'

$run_test_scenario_script = <<SCRIPT
  write-output "##teamcity[blockOpened name='Testing Scenario {scenario_name}']"
  $env:TEAMCITY_PROJECT_NAME="#{ENV['TEAMCITY_PROJECT_NAME']}"
  set-location c:/temp/tests
  write-host "executing bundle.bat _1.14.4_ exec rspec Spec/{scenario_name}_spec.rb --format documentation"
  C:/tools/ruby23/bin/bundle.bat _1.14.4_ exec rspec Spec/{scenario_name}_spec.rb --format documentation
  write-output "##teamcity[blockClosed name='Testing Scenario {scenario_name}']"
  exit $LASTEXITCODE
SCRIPT

Vagrant.configure(VAGRANT_FILE_API_VERSION) do |config|

  hostname = "vagrantdsc.local"
  config.vm.guest = :windows
  config.vm.communicator = "winrm"

  config.vm.synced_folder ".", "/vagrant", disabled: true

  if Vagrant.has_plugin?("vagrant-multi-hostsupdater")
    config.multihostsupdater.aliases = {ip_address => [hostname]}
  end

  config.vm.provider "virtualbox" do |v, override|
    v.gui = true
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    v.customize ["modifyvm", :id, "--audio", "none"]
    v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    v.customize ["modifyvm", :id, "--usb", "off"]
    override.vm.box = "OctopusDeploy/dsc-test-server-windows-2012-r2"
    override.vm.box_url = "https://s3-ap-southeast-2.amazonaws.com/octopus-vagrant-boxes/vagrant/json/OctopusDeploy/virtualbox/dsc-test-server-windows-2012-r2.json"
    override.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
    override.vm.network :forwarded_port, guest: 80,   host: 8000, id: "web"
    override.vm.network :forwarded_port, guest: 443, host: 8443,  id: "ssl"
    override.vm.network :forwarded_port, guest: 22, host: 9222,  id: "ssh"
  end

  # this relies on the vagrant-aws & vagrant-winrm-syncedfolders plugins
  config.vm.provider :aws do |aws, override|
    aws.access_key_id = aws_access_key_id
    aws.secret_access_key = aws_secret_access_key
    aws.region = "ap-southeast-2"
    aws.instance_type = "c4.xlarge"
    aws.keypair_name = "#{aws_key_name}"
    aws.tags = {
      'Name' => 'Vagrant DSC testing'
    }
    aws.security_groups = [ aws_security_group_id ]
    aws.subnet_id = aws_subnet_id
    aws.associate_public_ip = true
    aws.user_data = File.read("Tests/aws_user_data.ps1")
    override.vm.box = "OctopusDeploy/dsc-test-server-windows-2012-r2" #box added via launcher script
    override.ssh.private_key_path = "./#{aws_key_name}.pem"
    override.winrm.username = "Administrator"
    override.winrm.password = :aws # this uses the vagrant-aws-winrm plugin to get the password from aws
    override.winrm.transport = :ssl
    override.winrm.port = 5986
    override.winrm.ssl_peer_verification = false
  end

  config.vm.provider :azure do |azure, override|
    azure.resource_group_name = "OctopusDSCTesting"
    azure.location = 'AustraliaEast'
    azure.vm_name = "DSCTestVM"
    azure.vm_size = 'Standard_DS2_v2'
    azure.vm_image_urn = 'MicrosoftSQLServer:SQL2016SP1-WS2016:Express:latest'
    azure.instance_ready_timeout = 600
    azure.vm_password = azure_vm_password
    azure.admin_username = "OctoAdmin"
    azure.admin_password = azure_vm_password
    override.vm.box = "dummy"
    override.vm.box_url = "azure.dummy.box"
    override.winrm.transport = :ssl
    override.winrm.port = 5986
    override.winrm.ssl_peer_verification = false
    azure.winrm_install_self_signed_cert = true
    azure.wait_for_destroy = true
  end

  # delete existing tests if they exist (for dev)
  config.vm.provision "shell", inline: "if (Test-Path 'c:\\temp\\tests') {remove-item -force -recurse 'c:\\temp\\tests' }"
  # upload tests
  config.vm.provision "file", source: "Tests", destination: "c:\\temp\\tests"
  config.vm.provision "shell", path: "Tests/install-test-dependencies.ps1"
  # in theory, we shouldn't have to do this - the vagrant-dsc should upload it automatically, but cant get it to work
  config.vm.provision "file", source: "OctopusDSC", destination: 'C:\Windows\System32\WindowsPowerShell\v1.0\modules\OctopusDSC'

  # Run DSC to install server
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_01_Install.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_01_install')

  # remove the server
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_02_Remove.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_02_remove')

  # Run DSC to install server with a custom instance name
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_03_Install_Custom_Instance.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_03_install_custom_instance')

  # remove the server with a custom instance name
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_04_Remove_Custom_Instance.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_04_remove_custom_instance')

  # re-install old version
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_05_Reinstall.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_05_reinstall')

  # upgrade to the latest
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_06_Upgrade.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_06_upgrade')

  # install watchdog
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_07_Watchdog_Create.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_07_watchdog_create')

  # delete watchdog
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Server_Scenario_08_Watchdog_Delete.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'server_scenario_08_watchdog_delete')

  config.vm.provision "shell", path: "Tests/configure-octopus-for-tentacle-tests.ps1"

  # initial tentacle install
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_01_Install.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
    dsc.configuration_params = {
      "-OctopusServerUrl" => "$ENV:OctopusServerUrl",
      "-ApiKey" => "$ENV:OctopusApiKey",
      "-Environments" => "The-Env",
      "-Roles" => "Test-Tentacle",
      "-ServerThumbprint" => "$ENV:OctopusServerThumbprint"
    }
  end
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\register-polling-tentacle.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\trigger-and-wait-for-healthcheck.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_01_install')

  # uninstall tentacle
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_02_Remove.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
    dsc.configuration_params = {
      "-OctopusServerUrl" => "$ENV:OctopusServerUrl",
      "-ApiKey" => "$ENV:OctopusApiKey",
      "-Environments" => "The-Env",
      "-Roles" => "Test-Tentacle",
      "-ServerThumbprint" => "$ENV:OctopusServerThumbprint"
    }
  end
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\trigger-and-wait-for-healthcheck.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_02_remove')

  # Install old version
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_03_Reinstall.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
    dsc.configuration_params = {
      "-OctopusServerUrl" => "$ENV:OctopusServerUrl",
      "-ApiKey" => "$ENV:OctopusApiKey",
      "-Environments" => "The-Env",
      "-Roles" => "Test-Tentacle"
    }
  end
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\trigger-and-wait-for-healthcheck.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_03_reinstall')

  # Upgrade it
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_04_Upgrade.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
    dsc.configuration_params = {
      "-OctopusServerUrl" => "$ENV:OctopusServerUrl",
      "-ApiKey" => "$ENV:OctopusApiKey",
      "-Environments" => "The-Env",
      "-Roles" => "Test-Tentacle"
    }
  end
  config.vm.provision "shell", inline: "& c:\\temp\\Tests\\trigger-and-wait-for-healthcheck.ps1; exit $LASTEXITCODE"
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_04_upgrade')

  # install watchdog
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_05_Watchdog_Create.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_05_watchdog_create')

  # delete watchdog
  config.vm.provision "dsc" do |dsc|
    dsc.configuration_file  = "Tentacle_Scenario_06_Watchdog_Delete.ps1"
    dsc.configuration_data_file  = "Tests/Scenarios/Configuration.psd1"
    dsc.manifests_path = "Tests/Scenarios"
    dsc.abort_on_dsc_failure = true
  end
  config.vm.provision "shell", inline: $run_test_scenario_script.gsub('{scenario_name}', 'tentacle_scenario_06_watchdog_delete')

end
